{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"string","name":"asset","type":"string"},{"internalType":"uint8","name":"metric","type":"uint8"},{"internalType":"int80[]","name":"values","type":"int80[]"},{"internalType":"uint64","name":"endTime","type":"uint64"},{"internalType":"uint80","name":"usdcToDeposit","type":"uint80"},{"internalType":"bool","name":"speculatingOnYes","type":"bool"}],"name":"createMarketEvent","outputs":[{"internalType":"uint80","name":"","type":"uint80"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getLabel","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint80","name":"marketEventId","type":"uint80"}],"name":"getMarketEventName","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint80","name":"marketEventId","type":"uint80"}],"name":"getMarketEventNameVariables","outputs":[{"components":[{"internalType":"string","name":"format","type":"string"},{"internalType":"string","name":"text","type":"string"},{"internalType":"int256","name":"value","type":"int256"}],"internalType":"struct LabelVariable[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSupportedAssets","outputs":[{"internalType":"string[]","name":"","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSupportedMetrics","outputs":[{"components":[{"internalType":"uint8","name":"metricId","type":"uint8"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string[]","name":"valueLabels","type":"string[]"}],"internalType":"struct SupportedMetric[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{"createMarketEvent(string,uint8,int80[],uint64,uint80,bool)":{"notice":"Creates a new Market Event, returning the Market Event ID"},"getLabel()":{"notice":"Provides a human friendly label describing on what this Futures Provider enables speculating"},"getMarketEventName(uint80)":{"notice":"Provides a human friendly label for a Market Event  Always available: START_DATE, END_DATE"},"getMarketEventNameVariables(uint80)":{"notice":"Provides substitution variables for Uint256s for the Market Event label  The variables START_DATE and END_DATE are always available"},"getSupportedAssets()":{"notice":"Provides names of the supported assets"},"getSupportedMetrics()":{"notice":"Provides the available metrics and their names and integer IDs"}},"notice":"These methods are to provide information to the DApp about a particular Futures Provider","version":1}},"settings":{"compilationTarget":{"interfaces/IFuturesProvider.sol":"IFuturesProvider"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs","useLiteralContent":true},"optimizer":{"enabled":true,"runs":1000000},"remappings":[],"viaIR":true},"sources":{"interfaces/IFuturesProvider.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.25;\n\nstruct SupportedMetric {\n  uint8 metricId;\n  string name;\n  string[] valueLabels;\n}\n\n/**\n * This struct is used to provide substitutions.\n * \n * E.g. (format: \"usdc\", text: VALUE, value: 1230000)\n * Would replace VALUE with $1.23\n * \n * Formats are hard coded in the DApp\n */\nstruct LabelVariable {\n  string format;\n  string text;\n  int256 value;\n}\n\n/**\n * These methods are to provide information to the DApp about a particular Futures Provider\n */\ninterface IFuturesProvider {\n  /**\n   * Provides a human friendly label describing on what this Futures Provider enables speculating\n   */\n  function getLabel() external view returns (string memory);\n\n  /**\n   * Provides names of the supported assets\n   */\n  function getSupportedAssets() external view returns (string[] memory);\n\n  /**\n   * Provides the available metrics and their names and integer IDs\n   */\n  function getSupportedMetrics() external view returns (SupportedMetric[] memory);\n\n  /**\n   * Creates a new Market Event, returning the Market Event ID\n   */\n  function createMarketEvent(\n    string calldata asset,\n    uint8 metric,\n    int80[] calldata values,\n    uint64 endTime,\n    uint80 usdcToDeposit,\n    bool speculatingOnYes\n  ) external returns (uint80);\n\n  /**\n   * Provides a human friendly label for a Market Event\n   * \n   * Always available: START_DATE, END_DATE\n  */\n  function getMarketEventName(uint80 marketEventId) external view returns (string memory);\n\n  /**\n   * Provides substitution variables for Uint256s for the Market Event label\n   * \n   * The variables START_DATE and END_DATE are always available\n   */\n  function getMarketEventNameVariables(uint80 marketEventId) external view returns (LabelVariable[] memory);\n}","keccak256":"0xdd69c4764c0fa1914eb703ff9179bfa78eaaf6fc518652231c3c311056424db8","license":"UNLICENSED"}},"version":1}